# Async and testability

---

### Testing pure functions
``` javascript
// pure-function-spec.js
<!-- @include ./code/pure-function-spec.js -->
```
Note:
- Why is this easy to test?
  - All behavior can be asserted from the retuned value
  - In other words there are no side effects:
    - Effects next to the returned value

vvv

### Side effects
- Make testing difficult
- Can be recognized by:
  - `void` methods
  - Async / IO call
  - Mutation of (global) state

Note:
- Today examples of testing side effects
- As well as a method on avoiding them all together

---

### Monkey patching
```javascript
const originalConsoleLog = console.log;
console.log = mySpy;

// Run the method under test
expect(console.log).to.have.been.calledWith('some value');

console.log = originalConsoleLog;
```

Note:
- void method
- The only option for testing globals
- Does not work when testing window.location
- Monkey patching also the default in Python

vvv

### Monkey patching with a library
``` javascript
// monkey-patching-console.log-spec.js
<!-- @include ./code/monkey-patching-console.log-spec.js -->
```

Note:
- Replace a method with a proxy / mock
- Restore the method afterwards
- If you don't clean up your spy is still there in the next unit test
- Somewhat difficult, beforeEach, afterEach

---

### Async code - Fetches
``` javascript
// getPeople.js
<!-- @include ./code/getPeople.js -->
```

Note:
- Always write error handling when working with fetch
  - Promises can lose errors
- Why is this difficult to test?
  - Because side effects

vvv

### Monkey patching Node's HTTP API with Nock
``` javascript
// monkey-patching-fetch-spec.js
<!-- @include ./code/monkey-patching-fetch-spec.js -->
```

vvv

``` javascript
// proxyquire-spec.js
<!-- @include ./code/proxyquire-spec.js -->
```

Note:
- Proxyquire monkey patches require
- No need to clean the patch
- Use import string from file under test
- This test is asynchronous
- Using chai-as-promised
- We have to return a promise

---

### Async code - Timers
``` javascript
// Timer.js
<!-- @include ./code/Timer.js -->
```

Note:
- This is a component which shows the current time
- updates every 500ms
- Uses setInterval, clearInterval

vvv

### Testing timers
``` javascript
// Timer-spec.js
beforeEach(() => {
  sandbox = sinon.sandbox.create();
  sandbox.useFakeTimers();
  sandbox.spy(global, 'setInterval');
  sandbox.spy(global, 'clearInterval');
  wrapper = shallow(<Timer />);
});

afterEach(() => {
  sandbox.restore();
});
```

Note:
- Again we are monkeypatching globals
- Note the sandbox.restore
  - restores all monkey patches
- useFakeTimers makes the code synchronous
- you can deterimne how much time should pass during tests
- note we're using enzyme shallow rendering

vvv

### Testing timers
``` javascript
// Timer-spec.js
it('should update state.time every 500ms', () => {
  expect(wrapper.state()).to.deep.equal({ time: new Date(0) });
  sandbox.clock.tick(499);
  expect(wrapper.state()).to.deep.equal({ time: new Date(0) });
  sandbox.clock.tick(1);
  expect(wrapper.state()).to.deep.equal({ time: new Date(500) });
  sandbox.clock.tick(500);
  expect(wrapper.state()).to.deep.equal({ time: new Date(1000) });
});
```

Note:
- State is not updated until 500 ms
- Check it keeps updating
- This test actually reads really nicely
- It is fully synchronous

vvv

### Testing the cleanup
``` javascript
// Timer-spec.js
it('should clear the interval on unmount', () => {
  expect(setInterval).to.have.callCount(1);
  wrapper.unmount();
  expect(clearInterval).to.have.been.calledWithExactly(
    setInterval.returnValues[0]
  );
});
```

Note:
- This is why we are spying on setInterval and clearInterval
- We are just using the globals here which are spies
- We check the callCount to make sure only one setInterval was created
  - to.have.callCount is an example of sinon chai
- Then we make sure that setInterval was cleared
- The returnValues array is filled with results of underlying setInterval


---

### Dependency injection (like Angular)
``` javascript
// PeopleService.js
<!-- @include ./code/PeopleService.js -->
```
Note:
- ngInject to figure out fetch
- parse function.toString
- generic dependency injection is difficult
  - need instances, which need other instances
  - dependency tree

vvv

### Custom dependency injection
``` javascript
// PeopleService.js
export default function PeopleService({ fetch }) {
  this.getPeople = (id) =>
    fetch(`http://swapi.co/api/people/${id}/`)
      .then(res => res.json());
}
```
Note:
- destructure dependency object

vvv

``` javascript
// dependency-injection-spec.js
<!-- @include ./code/dependency-injection-spec.js -->
```

Note:
- Create instance in beforeEach
- Configure mock in your test
- Assert calledWith

---

### Redux
Does not need any side effects in:
- View
- Reducers (update state)
- Synchronous action creators

Just one place left for side effects:
- Asynchronous action creators

Note:
- React view props -> view
- Reducers always return a new state, no mutation
- Normal actions creators just return an object
- You need io / network calls

---

### Redux Thunk
``` javascript
// getPeopleThunk.js
<!-- @include ./code/getPeopleThunk.js -->
```

vvv

``` javascript
// get-people-thunk-spec.js
<!-- @include ./code/get-people-thunk-spec.js -->
```

Note:
- The point of this code it show that is difficult
- Set up a mock for fetch and dispatch
- Could use nock to avoid the proxyquire for fetch
  - Redux docs advise this
  - In production code this is probably a service instead of fetch
  - Otherwise the code will looks the same
- Work with promises / chai as promised
- Everything is async
- We can do better
- First some background about generators

---

### Generators!
- Function that can be entered multiple times
- Context is saved across re-entrances
- Standard JS feature (es2015)
- Only small runtime/polyfill required (2.2 min + gzip)

Note:
- Standard es2015 javascript feature
- Use it with babel and a 5 kb runtime minified js (2 kb gzipped)
- Based on Python generators
- Without a code example this is really fague

vvv

### Example generator
``` javascript
// generate-fibonacci.js
<!-- @include ./code/generate-fibonacci.js -->
```

Note:
- The context a / b are saved
- It will product infinite fibonacci numbers
- Can be invoked Synchronous and Asynchronous
- Pull based

vvv

### Consuming the generator
``` javascript
// generate-fibonacci-spec.js
it('should return fibonacci numbers', () => {
  const fibonacciNumbers = [];
  const generator = generateFibonacci();

  for (let i = 0, number; i < 8; i++) {
    number = generator.next();
    fibonacciNumbers.push(number.value);
  }

  expect(fibonacciNumbers).to.deep.equal(
    [1, 1, 2, 3, 5, 8, 13, 21]
  );
});
```

Note:
- Yes I can use a for / of loop here
- This an example of synchronous consumption
- Generator.next() can be called in async handlers
- There is a async example in the code of this presentation
- Async is hard therefore I won't show that example

vvv

### Generators for async
- A generator basically defines a sequence of callbacks
- You can pass values into a generator using:
  - `generator.next(value)`
  - `generator.throw(value)`
- If you generate promises you get async / await

Note:
- You could write a function which gets the promise
- and then passes the result or exception back into the generator
- Next actually takes arguments

vvv

### Async / await does not remove side effects

``` javascript
// asyncGetPeople.js
<!-- @include ./code/asyncGetPeople.js -->
```

Note:
- It still is a generator
- The result of `asyncGetPeople(id)` is a `Promise`
- `next()` is called automatically
- Can't call next from a test
- No access to the call object for the saga middleware
- Test like any other function that returns a `Promise`


vvv

### Testing async / await is still difficult
``` javascript
// proxyquire-async-spec.js
<!-- @include ./code/proxyquire-async-spec.js -->
```

Note:
- This still looks a look like testing with redux-thunk

vvv

### Now without side effects
``` javascript
// semi code
export default function* getPeopleSaga(id) {
  const res = yield {
    action: 'call',
    object: fetch,
    args: [`http://swapi.co/api/people/${id}/`]
  };

  return res.json();
}
```

Note:
- This is a generator which generates a description of a side effect
- This removed the sideeffects but you need a runner to make this code work

---

### Redux Saga
- And alternative Side Effects middleware for Redux
- No side effects your code
- Easy testability
- Complex async flows
- Support for cancelling

Note:
- Side effects cause the need for mocks
- You have to implement the cancelling yourself
  - Fetch does not support it, but xhr does

vvv

### Example Saga
``` javascript
// getPeopleSaga.js
<!-- @include ./code/getPeopleSaga.js -->
```

Note:
- A saga is standard es2015 generator
- No side effects
  - Call is a pure function which returns a plain object
  - The saga middleware performs sideeffects
  - In FP you can have side effects as long as don't perform them yourself.
- Not just for fetch, but for any call with side effects
  - Even Synchronous calls
- Easy to test

vvv

### Testing the Saga
``` javascript
const generator = getPeople(1);

const fetchCall = generator.next();
expect(fetchCall.value).to.deep.equal(
  call(fetch, 'http://swapi.co/api/people/1/')
);
const yieldJson = generator.next({
  json: () => 'json promise',
});
```
Note:
- The result of the yield can be passed in next

vvv

### Testing the Saga full spec
``` javascript
// redux-saga-spec.js
<!-- @include ./code/redux-saga-spec.js -->
```
Note:

* No beforeEach/afterEach
* Fetch does not occur
* No need for chai-as-promised
* call actually return a plain javascript object

vvv

### Compiled generator
```javascript
function getPeopleSaga(id) {
  var res;
  return regeneratorRuntime.wrap(function getPeopleSaga$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.call)(
            _nodeFetch2.default,
            'http://swapi.co/api/people/' + id + '/'
          );
        case 2:
          res = _context.sent;
          return _context.abrupt('return', res.json());
        case 4:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this);
}
```

Note:
- Don't look too much to the details
- Function is split up
- Execute the steps separately

vvv

### Call is a plain `Object`
```javascript
expect(fetchCall.value).to.deep.equal({
  '@@redux-saga/IO': true,
  CALL: {
    args: ['http://swapi.co/api/people/1/'],
    context: [null],
    fn: fetch,
  },
});
```

vvv

### About Redux saga
- No hot module reloading of the saga (yet)
- You can run calls in parallel (like Promise.all)
- Use `fork` to run entire Sagas in parallel

Note:
- What to do about running sagas when hot reloading?
- Issue #22
- If a saga gets cancelled an exception is thrown inside it
  - Implement it yourself
- Any async call / fetch in parallel
- But these are generators?
  - generator runtime 5.5k 2.1k gzipped

---

### Takeaways
- All code can be written testable
- Mocks / monkeypatches make tests hard to read (and write)
- It is possible to avoid mocks / monkeypatching alltogether

Slides + code:
https://github.com/0xR/xke-async-testing

Note:
- No excuse not to test
- Mocks / monkeypatches and proxyquire makes things difficult to read
- It can be avoided by redux saga
- Make your own alternative if you're not doing redux
- Not too loud: I've shown IO monads in JS
